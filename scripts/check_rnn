#!/usr/bin/env python

##################################################################
# Imports
from __future__ import absolute_import, print_function, unicode_literals
import numpy as np

##################################################################
# Data
RNN_MTX = np.array(
    [[-0.52065706,  0.43439934, -0.3093442, -0.53219843, -0.12910908],
     [-0.15510236,  0.05108266, -0.42656425,  0.57379818,  0.11489505],
     [-0.3622781,  0.15142389,  0.13930438, -0.07262486,  0.56374454],
     [-0.38279748, -0.05096604, -0.3942669,  0.31255338, -0.44656813],
     [0.54483348,  0.62520182, -0.19780837, -0.07332332, -0.20720333],
     [0.08967841,  0.51565754,  0.01097823,  0.372697,  0.30855983],
     [0.18325275, -0.09525192, -0.08174709, -0.12871535, -0.26180187],
     [0.06792253, -0.14132909, -0.0715519, -0.04962438, -0.18151522],
     [0.23683034, -0.24909477, -0.63798481, -0.33224696,  0.43281397],
     [0.16706507, -0.18784556, -0.29903424,  0.10420591,  0.16106087]],
    dtype="float32")

EMBS1 = np.array(
    [[-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [0.04221963,  0.08345763,  0.02297,  0.05427301, -0.11754542],
     [0.03230883,  0.01477132, -0.10587347,  0.02074818, -0.06008138],
     [0.09258671, -0.06759726,  0.01365674,  0.05894275,  0.03448456],
     [-0.01847866,  0.05728685, -0.01017131,  0.00419616,  0.00506925],
     [0.02538488, -0.02685067, -0.07898362, -0.05883898, -0.05057359],
     [-0.01511703, -0.0473387,  0.0249827, -0.01851367, -0.00139297],
     [-0.07920934, -0.00658638,  0.03929083,  0.0366967,  0.07504297],
     [-0.03420381,  0.06243037,  0.02656023, -0.01341905,  0.01970242],
     [-0.07942019, -0.10378524,  0.02676334,  0.06222896, -0.01848242],
     [0.03230883,  0.01477132, -0.10587347,  0.02074818, -0.06008138],
     [0.00389916, -0.03941838,  0.06475085, -0.037234, -0.02055616],
     [0.0868303, -0.05449387, -0.07492794, -0.03267642,  0.03468118],
     [0.09258671, -0.06759726,  0.01365674,  0.05894275,  0.03448456],
     [-0.10953514, -0.02391616,  0.04771025,  0.06349132, 0.0502921],
     [0.05048761, -0.03410527,  0.02706178, -0.04285871, -0.02269472],
     [-0.01878203, -0.04354157,  0.06127384,  0.10595981,  0.00968337],
     [-0.00737379, -0.06822318,  0.03074283,  0.03719129, -0.04753363],
     [0.02651816,  0.0337332, -0.02353446, -0.01943732,  0.00564354],
     [0.0188087, -0.11754542, -0.05387697, -0.07546213,  0.11118051],
     [0.0188087, -0.11754542, -0.05387697, -0.07546213,  0.11118051],
     [0.03404842,  0.03315773,  0.04902206, -0.05279293,  0.04745553],
     [-0.04308422,  0.02098024,  0.06455977,  0.07652199, -0.11754542],
     [-0.06204857, -0.03520157,  0.05885445,  0.0084823,  0.021158],
     [-0.07566144,  0.1000546,  0.06771834, -0.06673014, -0.00488563],
     [0.00389916, -0.03941838,  0.06475085, -0.037234, -0.02055616],
     [-0.08881601,  0.02027314, -0.08381506, -0.01797497, -0.05460863],
     [-0.00021268, -0.00944547, -0.01665917, -0.04377435,  0.11754542],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452]],
    dtype="float32")
DEPS1 = np.array(
    [[-1, -1],
     [-1, -1],
     [19, 18],
     [26, 25],
     [21, 22],
     [18, 17],
     [7,  6],
     [25, 20],
     [24, 20],
     [23, 20],
     [22, 20],
     [17, 20],
     [14, 15],
     [13, 15],
     [12, 15],
     [10, 15],
     [6,  5],
     [20, 16],
     [15, 16],
     [11, 16],
     [5,  4],
     [16,  8],
     [9,  8],
     [4,  8],
     [1,  0],
     [8,  3],
     [2,  3],
     [0,  3],
     [3, -1]], dtype="int32")
OUT1 = np.array([0.03286952, -0.03397652,  0.08140688,
                 -0.04893411, 0.00779378], dtype="float32")

EMBS2 = np.array(
    [[-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452],
     [-0.07241048,  0.0555308, -0.03055396, -0.04230372,  0.00335857],
     [0.03913539,  0.01330729,  0.06894266, -0.05704565, -0.01195414],
     [0.06261894,  0.0471749,  0.04487953,  0.05773141,  0.07706015],
     [-0.03644317,  0.07742758, -0.1125153,  0.02753562, -0.05809207],
     [0.022619, -0.0403293, -0.00309619, -0.00533003,  0.02798262],
     [-0.0365374,  0.05382109,  0.01607834,  0.08454709, -0.04195774],
     [0.02651816,  0.0337332, -0.02353446, -0.01943732,  0.00564354],
     [0.02316151,  0.048339,  0.09758602,  0.11754542,  0.01193794],
     [-0.05310486,  0.07713399,  0.07713261,  0.00192942,  0.03367452]],
    dtype="float32")
DEPS2 = np.array(
    [[-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [-1, -1],
     [5,  4],
     [4,  3],
     [2,  3],
     [3,  1],
     [6,  0],
     [1,  0],
     [0,  7],
     [7, -1]], dtype="int32")
OUT2 = np.array([-0.01445288, -0.02735846,  0.04774695,
                 -0.05937821,  0.01720735], dtype="float32")


##################################################################
# Methods
def rnn(embs, deps):
    for chld_idx, prnt_idx in deps:
        chld_embs = embs[chld_idx]
        prnt_embs = embs[prnt_idx]
        embs[prnt_idx] = np.tanh(
            np.dot(np.concatenate([chld_embs, prnt_embs], axis=-1),
                   RNN_MTX))
    return embs[-1]


##################################################################
# Test
assert np.allclose(rnn(EMBS1, DEPS1), OUT1)
assert np.allclose(rnn(EMBS2, DEPS2), OUT2)
print("Test cases succeeded.")
